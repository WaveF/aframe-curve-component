!function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={exports:{},id:moduleId,loaded:!1};return modules[moduleId].call(module.exports,module,module.exports,__webpack_require__),module.loaded=!0,module.exports}__webpack_require__.m=modules,__webpack_require__.c=installedModules,__webpack_require__.p="",__webpack_require__(0)}([function(module,exports){if("undefined"==typeof AFRAME)throw new Error("Component attempted to register before AFRAME was available.");AFRAME.registerComponent("curve-point",{schema:{fps:{type:"number",default:0}},init:function(){this.el.emit("curve-point-changed"),this.oldPos={...this.el.object3D.position},this.loop(function(){let newPos={...this.el.object3D.position};JSON.stringify(this.oldPos)!==JSON.stringify(newPos)&&(this.el.emit("curve-point-changed"),this.oldPos=newPos)}.bind(this),this.data.fps)},changeHandler:function(event){"position"==event.detail.name&&this.el.emit("curve-point-changed")},loop:function(callback,fps){let fpsInterval=1e3/fps,then=now=Date.now(),elapsedTime=0,raf=()=>{requestAnimationFrame(raf),now=Date.now(),elapsedTime=now-then,elapsedTime>fpsInterval&&(then=now-elapsedTime%fpsInterval,callback())};raf()}}),AFRAME.registerComponent("curve",{dependencies:["curve-point"],schema:{type:{type:"string",default:"CatmullRom",oneOf:["CatmullRom","CubicBezier","QuadraticBezier","Line"]},closed:{type:"boolean",default:!1},fps:{type:"number",default:0}},init:function(){this.pathPoints=null,this.curve=null,this.el.addEventListener("curve-point-changed",this.update.bind(this))},update:function(oldData){if(this.points=Array.from(this.el.querySelectorAll("a-curve-point, [curve-point]")),this.points.length<=1)console.warn("At least 2 curve-points needed to draw a curve"),this.curve=null;else{var pointsArray=this.points.map((function(point){return void 0!==point.x&&void 0!==point.y&&void 0!==point.z?point:point.object3D.getWorldPosition(new THREE.Vector3)}));if(!AFRAME.utils.deepEqual(pointsArray,this.pathPoints)||"CustomEvent"!==oldData&&!AFRAME.utils.deepEqual(this.data,oldData)){switch(this.curve=null,this.pathPoints=pointsArray,this.data.type){case"CubicBezier":if(4!=this.pathPoints.length)throw new Error("The Three constructor of type CubicBezierCurve3 requires 4 points");this.curve=new THREE.CubicBezierCurve3(this.pathPoints[0],this.pathPoints[1],this.pathPoints[2],this.pathPoints[3]);break;case"QuadraticBezier":if(3!=this.pathPoints.length)throw new Error("The Three constructor of type QuadraticBezierCurve3 requires 3 points");this.curve=new THREE.QuadraticBezierCurve3(this.pathPoints[0],this.pathPoints[1],this.pathPoints[2]);break;case"Line":if(2!=this.pathPoints.length)throw new Error("The Three constructor of type LineCurve3 requires 2 points");this.curve=new THREE.LineCurve3(this.pathPoints[0],this.pathPoints[1]);break;case"CatmullRom":this.curve=new THREE.CatmullRomCurve3(this.pathPoints);break;case"Spline":this.curve=new THREE.SplineCurve3(this.pathPoints);break;default:throw new Error("No Three constructor of type (case sensitive): "+this.data.type+"Curve3")}this.curve.closed=this.data.closed,this.el.emit("curve-updated")}}},remove:function(){this.el.removeEventListener("curve-point-changed",this.update.bind(this))},closestPointInLocalSpace:function closestPoint(point,resolution,testPoint,currentRes){if(!this.curve)throw Error("Curve not instantiated yet.");resolution=resolution||.1/this.curve.getLength(),currentRes=currentRes||.5;var aTest=(testPoint=testPoint||.5)+(currentRes/=2),bTest=testPoint-currentRes,a=this.curve.getPointAt(aTest),b=this.curve.getPointAt(bTest),aDistance=a.distanceTo(point),bDistance=b.distanceTo(point),aSmaller=aDistance<bDistance;if(currentRes<resolution){var tangent=this.curve.getTangentAt(aSmaller?aTest:bTest);if(currentRes<resolution)return{result:aSmaller?aTest:bTest,location:aSmaller?a:b,distance:aSmaller?aDistance:bDistance,normal:this.normalFromTangent(tangent),tangent:tangent}}return aDistance<bDistance?this.closestPointInLocalSpace(point,resolution,aTest,currentRes):this.closestPointInLocalSpace(point,resolution,bTest,currentRes)},normalFromTangent:function(tangent){var lineEnd=new THREE.Vector3(0,1,0),tempQuaternion=new THREE.Quaternion,zAxis=new THREE.Vector3(0,0,1);return tempQuaternion.setFromUnitVectors(zAxis,tangent),lineEnd.applyQuaternion(tempQuaternion),lineEnd}}),AFRAME.registerShader("line",{schema:{color:{default:"#ff0000"}},init:function(data){this.material=new THREE.LineBasicMaterial(data)},update:function(data){this.material=new THREE.LineBasicMaterial(data)}}),AFRAME.registerComponent("draw-curve",{schema:{curve:{type:"selector"}},init:function(){this.data.curve.addEventListener("curve-updated",this.update.bind(this))},update:function(){if(this.data.curve&&(this.curve=this.data.curve.components.curve),this.curve&&this.curve.curve){var bufferGeometry=new THREE.BufferGeometry;if(bufferGeometry.setFromPoints)var lineGeometry=bufferGeometry.setFromPoints(this.curve.curve.getPoints(10*this.curve.curve.getPoints().length));this.el.setObject3D("mesh",new THREE.Line);var mesh=this.el.object3D;lineMaterial=mesh.material?mesh.material:new THREE.LineBasicMaterial({color:"#ff0000"}),this.el.setObject3D("mesh",new THREE.Line(lineGeometry,lineMaterial))}},remove:function(){this.data.curve.removeEventListener("curve-updated",this.update.bind(this)),this.el.getObject3D("mesh").geometry=new THREE.Geometry}}),AFRAME.registerComponent("clone-along-curve",{schema:{curve:{type:"selector"},spacing:{default:1},rotation:{type:"vec3",default:{x:0,y:0,z:0}},scale:{type:"vec3",default:{x:1,y:1,z:1}}},init:function(){this.el.addEventListener("model-loaded",this.update.bind(this)),this.data.curve.addEventListener("curve-updated",this.update.bind(this))},update:function(){if(this.remove(),this.data.curve&&(this.curve=this.data.curve.components.curve),!this.el.getObject3D("clones")&&this.curve&&this.curve.curve){var mesh=this.el.getObject3D("mesh"),length=this.curve.curve.getLength(),start=0,counter=0;this.el.setObject3D("clones",new THREE.Group);var cloneMesh=this.el.object3D;cloneMesh.clear();var degToRad=THREE.Math.degToRad,zAxis=new THREE.Vector3(0,0,1),parent=new THREE.Object3D;for(mesh.scale.set(this.data.scale.x,this.data.scale.y,this.data.scale.z),mesh.rotation.set(degToRad(this.data.rotation.x),degToRad(this.data.rotation.y),degToRad(this.data.rotation.z)),mesh.rotation.order="YXZ",parent.add(mesh);counter<=length;){var child=parent.clone(!0);child.position.copy(this.curve.curve.getPointAt(counter/length)),tangent=this.curve.curve.getTangentAt(counter/length).normalize(),child.quaternion.setFromUnitVectors(zAxis,tangent),cloneMesh.add(child),counter+=this.data.spacing}}},remove:function(){this.curve=null,this.el.getObject3D("clones")&&this.el.removeObject3D("clones")}}),AFRAME.registerPrimitive("a-draw-curve",{defaultComponents:{"draw-curve":{}},mappings:{curveref:"draw-curve.curve"}}),AFRAME.registerPrimitive("a-curve-point",{defaultComponents:{"curve-point":{}},mappings:{}}),AFRAME.registerPrimitive("a-curve",{defaultComponents:{curve:{}},mappings:{type:"curve.type"}})}]);