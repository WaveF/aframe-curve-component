(function(t){function e(r){if(i[r])return i[r].exports;var s=i[r]={exports:{},id:r,loaded:!1};return t[r].call(s.exports,s,s.exports,e),s.loaded=!0,s.exports}var i={};e.m=t,e.c=i,e.p="",e(0)})([function(t,e){if("undefined"==typeof AFRAME)throw new Error("Component attempted to register before AFRAME was available.");AFRAME.registerComponent("curve-point",{dependencies:["position"],schema:{color:{type:"color",default:"#fff"},fps:{type:"number",default:0}},init:function(){this.el.emit("curve-point-changed"),this.oldPos={...this.el.object3D.position},this.data.fps>0&&this.loop(function(){let t={...this.el.object3D.position};JSON.stringify(this.oldPos)!==JSON.stringify(t)&&(this.el.emit("curve-point-changed"),this.oldPos=t)}.bind(this),this.data.fps)},loop:function(t,e){let i=Date.now(),r=i,s=0,n=1e3/e,o=()=>{requestAnimationFrame(o),r=Date.now(),s=r-i,s>n&&(i=r-s%n,t())};o()}}),AFRAME.registerComponent("curve",{dependencies:["curve-point"],schema:{size:{type:"number",default:.1},type:{type:"string",default:"CatmullRom",oneOf:["CatmullRom","CubicBezier","QuadraticBezier","Line"]},closed:{type:"boolean",default:!1},fps:{type:"number",default:0}},init:function(){this.pathPoints=null,this.curve=null,this.data.fps>0?this.loop(this.update.bind(this),this.data.fps):this.el.addEventListener("curve-point-changed",this.update.bind(this))},update:function(t){if(this.points=Array.from(this.el.querySelectorAll("a-curve-point, [curve-point]")),this.points.forEach(t=>{const e=t.tagName.toLowerCase();this.data.size>0&&"a-curve-point"===e&&(t.setAttribute("geometry","primitive","box"),t.setAttribute("geometry","width",this.data.size),t.setAttribute("geometry","height",this.data.size),t.setAttribute("geometry","depth",this.data.size),t.setAttribute("material","color","#FFF"),t.setAttribute("material","transparent",!0),t.setAttribute("material","opacity",.5))}),this.points.length<=1)console.warn("At least 2 curve-points needed to draw a curve"),this.curve=null;else{var e=this.points.map(function(t){let e;return e=void 0!==t.x&&void 0!==t.y&&void 0!==t.z?t:t.object3D.getWorldPosition(new THREE.Vector3),e});if(!AFRAME.utils.deepEqual(e,this.pathPoints)||"CustomEvent"!==t&&!AFRAME.utils.deepEqual(this.data,t)){switch(this.curve=null,this.pathPoints=e,this.data.type){case"CubicBezier":if(4!=this.pathPoints.length)throw new Error("The Three constructor of type CubicBezierCurve3 requires 4 points");this.curve=new THREE.CubicBezierCurve3(this.pathPoints[0],this.pathPoints[1],this.pathPoints[2],this.pathPoints[3]);break;case"QuadraticBezier":if(3!=this.pathPoints.length)throw new Error("The Three constructor of type QuadraticBezierCurve3 requires 3 points");this.curve=new THREE.QuadraticBezierCurve3(this.pathPoints[0],this.pathPoints[1],this.pathPoints[2]);break;case"Line":if(2!=this.pathPoints.length)throw new Error("The Three constructor of type LineCurve3 requires 2 points");this.curve=new THREE.LineCurve3(this.pathPoints[0],this.pathPoints[1]);break;case"CatmullRom":this.curve=new THREE.CatmullRomCurve3(this.pathPoints);break;case"Spline":let t=this.pathPoints.map(t=>new THREE.Vector2(t.x,t.y));this.curve=new THREE.SplineCurve(t);break;default:throw new Error("No Three constructor of type (case sensitive): "+this.data.type+"Curve3")}this.curve.closed=this.data.closed,this.el.emit("curve-updated")}}},remove:function(){this.el.removeEventListener("curve-point-changed",this.update.bind(this))},closestPointInLocalSpace:function(t,e,i,r){if(!this.curve)throw Error("Curve not instantiated yet.");e=e||.1/this.curve.getLength(),r=r||.5,i=i||.5,r/=2;var s=i+r,n=i-r,o=this.curve.getPointAt(s),a=this.curve.getPointAt(n),c=o.distanceTo(t),u=a.distanceTo(t),h=c<u;if(r<e){var l=this.curve.getTangentAt(h?s:n);if(r<e)return{result:h?s:n,location:h?o:a,distance:h?c:u,normal:this.normalFromTangent(l),tangent:l}}return c<u?this.closestPointInLocalSpace(t,e,s,r):this.closestPointInLocalSpace(t,e,n,r)},normalFromTangent:function(t){var e=new THREE.Vector3(0,1,0),i=new THREE.Quaternion,r=new THREE.Vector3(0,0,1);return i.setFromUnitVectors(r,t),e.applyQuaternion(i),e},loop:function(t,e){let i=Date.now(),r=i,s=0,n=1e3/e,o=()=>{requestAnimationFrame(o),r=Date.now(),s=r-i,s>n&&(i=r-s%n,t())};o()}}),AFRAME.registerShader("line",{schema:{color:{default:"#ff0000"}},init:function(t){this.material=new THREE.LineBasicMaterial(t)},update:function(t){this.material=new THREE.LineBasicMaterial(t)}}),AFRAME.registerComponent("draw-curve",{schema:{curve:{type:"selector"},color:{type:"color",default:"#f00"}},init:function(){this.data.curve.addEventListener("curve-updated",this.update.bind(this))},update:function(){if(this.data.curve&&(this.curve=this.data.curve.components.curve),this.curve&&this.curve.curve){var t=new THREE.BufferGeometry;if(t.setFromPoints)var e=t.setFromPoints(this.curve.curve.getPoints(10*this.curve.curve.getPoints().length));this.el.setObject3D("mesh",new THREE.Line);let i=new THREE.LineBasicMaterial({color:this.data.color});this.el.setObject3D("mesh",new THREE.Line(e,i))}},remove:function(){this.data.curve.removeEventListener("curve-updated",this.update.bind(this)),this.el.getObject3D("mesh").geometry=new THREE.Geometry}}),AFRAME.registerComponent("clone-along-curve",{schema:{curve:{type:"selector"},spacing:{default:1},rotation:{type:"vec3",default:{x:0,y:0,z:0}},scale:{type:"vec3",default:{x:1,y:1,z:1}},tangent:{type:"boolean",default:!1}},init:function(){this.el.addEventListener("model-loaded",this.update.bind(this)),this.data.curve.addEventListener("curve-updated",this.update.bind(this))},update:function(){if(this.remove(),this.data.curve&&(this.curve=this.data.curve.components.curve),!this.el.getObject3D("clones")&&this.curve&&this.curve.curve){var t=this.el.getObject3D("mesh"),e=this.curve.curve.getLength(),i=0,r=i;this.el.setObject3D("clones",new THREE.Group);var s=this.el.object3D;s.clear();var n,o=THREE.Math.degToRad,a=new THREE.Vector3(0,0,1),c=new THREE.Object3D;for(t.scale.set(this.data.scale.x,this.data.scale.y,this.data.scale.z),t.rotation.set(o(this.data.rotation.x),o(this.data.rotation.y),o(this.data.rotation.z)),t.rotation.order="YXZ",c.add(t);r<=e;){var u=c.clone(!0);u.position.copy(this.curve.curve.getPointAt(r/e)),n=this.curve.curve.getTangentAt(r/e).normalize(),this.data.tangent&&u.quaternion.setFromUnitVectors(a,n),s.add(u),r+=this.data.spacing}}},remove:function(){this.curve=null,this.el.getObject3D("clones")&&this.el.removeObject3D("clones")}}),AFRAME.registerPrimitive("a-draw-curve",{defaultComponents:{"draw-curve":{}},mappings:{target:"draw-curve.curve",color:"draw-curve.color"}}),AFRAME.registerPrimitive("a-curve-point",{defaultComponents:{"curve-point":{}},mappings:{}}),AFRAME.registerPrimitive("a-curve",{defaultComponents:{curve:{}},mappings:{type:"curve.type",fps:"curve.fps",size:"curve.size"}})}]);